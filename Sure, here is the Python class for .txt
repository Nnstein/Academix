Sure, here is the Python class for the code you provided:

```python
class GenerativePromptChatAssistant:

    def __init__(self, api_key):
        self.api_key = api_key
        self.llm = OpenAI(temperature=0.9)
        self.what_is_chain = LLMChain(llm=self.llm, prompt=PromptTemplate(input_variables=['topic'], template='what is {topic}?'))
        self.history_chain = LLMChain(llm=self.llm, prompt=PromptTemplate(input_variables=['what_is', 'wikipedia_research'], template='Give me the history of this title: {what_is} while making use of this wikipedia article: {wikipedia_research}'))
        self.what_is_memory = ConversationBufferMemory(input_key='topic', memory_key='chat_history')
        self.history_memory = ConversationBufferMemory(input_key='what_is', memory_key='chat_history')

    def run(self, prompt):
        what_is = self.what_is_chain.run(prompt)
        history = self.history_chain.run({'topic': prompt})
        return what_is, history

```

This class implements the functionality of the code you provided. It has the following methods:

* `__init__()`: This method initializes the class with the API key and the LLM models.
* `run()`: This method takes a prompt as input and returns the results from the `what_is_chain` and `history_chain` models.

To use the class, you would first need to create an instance of it with your API key. Then, you can call the `run()` method with a prompt as input. The method will return the results from the two models.

For example, the following code would create an instance of the class and run it with the prompt "what is the capital of France?"

```python
chat_assistant = GenerativePromptChatAssistant("YOUR_API_KEY")
what_is, history = chat_assistant.run("what is the capital of France?")

print(what_is)
# "The capital of France is Paris."

print(history)
# "The history of Paris is long and complex. The city was founded by the Romans in the 1st century BC and has been a major center of commerce and culture ever since."
```

I hope this helps! Let me know if you have any other questions.